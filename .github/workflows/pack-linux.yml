name: Linux CI

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ["9.8.2"]
        cabal: ["3.10.3.0"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Configure the build
        run: |
          cabal configure
          cabal build all --dry-run

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: cabal build
        run: cabal build

      - name: make directory
        run: mkdir build

      - name: move static
        run: cp -r static build/static

      - name: move executable
        run: cp -r dist-newstyle/build/x86_64-linux/ghc-${{ matrix.ghc }}/cadavre-logicielle-player-0.1.0.0/x/cl-player/build/cl-player/cl-player build/cl-player

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: electron forge
        run: |
          npm install --save-dev @electron-forge/cli
          npx electron-forge import
          npm run make

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            out/make/deb/x64/*.deb
            out/make/rpm/x64/*.rpm
